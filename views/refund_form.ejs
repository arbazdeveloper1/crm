<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta content="width=device-width, initial-scale=1, maximum-scale=1, shrink-to-fit=no" name="viewport" />
  <title>Refund | (MFS TRAVELS)</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />

  <link href="https://cdn.quilljs.com/1.3.7/quill.snow.css" rel="stylesheet" />
  <!-- Quill JS -->
  <script src="https://cdn.quilljs.com/1.3.7/quill.min.js"></script>

  <script src="/public/assets/js/custom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <!-- toastr -->
  <link rel="stylesheet" href="/assets/bundles/izitoast/css/iziToast.min.css">
  <script src="/assets/bundles/izitoast/js/iziToast.min.js"></script>


</head>
<style>
  #editor-container {
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 10px;
    background-color: #f9f9f9;
    overflow: auto;
    /* Allows scrollbars for overflowing content */
    resize: both;
    /* Enables resizing */
    min-height: 150px;
    /* Minimum height */
    min-width: 300px;
    /* Minimum width */
    max-height: 500px;
    /* Optional maximum height */
    max-width: 1100px;
    /* Optional maximum width */
  }

  body {
    background-image: url("/assets/img/banner/formbg.png");
    /* Change this to the path of your PNG image */
    background-size: cover;
    /* Cover the entire viewport */
    background-repeat: no-repeat;
    /* Prevent tiling */
    background-position: center;
    /* Center the image */
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    /* Full viewport height */
    margin: 0;
    /* Remove default margin */
  }

  .step-indicator {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
  }

  .step-indicator div {
    width: 100%;
    text-align: center;
    position: relative;
    padding: 10px;
    border: 1px solid transparent;
    border-radius: 5px;
    /* Rounded corners */
    cursor: pointer;
    /* Change cursor to pointer */
  }

  .step-indicator .active {
    background-color: #6777ef;
    /* Green background for active step */
    color: white;
    /* White text for active step */
  }

  .step-indicator .completed {
    color: green;
    /* Green text for completed steps */
    font-weight: bold;
    /* Bold text for completed steps */
  }

  .step {
    display: none;
  }

  .step.active {
    display: block;
  }

  .box-control {
    box-shadow: 4px 4px 48px 22px rgba(0, 0, 0, 0.1);
    background: #f8f9fa;
    border-radius: 15px;
  }

  .next {
    background: #6777ef;
    color: white;
    padding: 5px 25px 5px 25px;
  }

  .error {
    border: 1px solid red;
    /* background-color: #f9e8e8; */
  }
</style>

<body>
  <a href="/" class="btn text-white" 
   style="background: #6777ef; position: fixed; top: 20px; right: 30px; z-index: 1000; padding: 10px 20px; border-radius: 5px; text-decoration: none;">
   Back to Home
</a>


 
  <div class="container mt-5" style="width: 50%">
    <div class="col-12 p-3 box-control">
      <h5 class="justify-content-center d-flex text-danger">
        Refund
        <p class="text-dark">(Email draft)</p>
      </h5>
      <div class="step-indicator" style="background-color: antiquewhite">
        <div id="step1-indicator" class="active">Price Description</div>
        <div id="step2-indicator">Card Information</div>
        <div id="step3-indicator">Header</div>
        <div id="step4-indicator">Passenger</div>
        <div id="step5-indicator">Itinerary</div>
      </div>
      <form id="multiStepForm" enctype="multipart/form-data">
        <!-- Step 1 -->
        <div class="step active" id="step1">
          <div class="row">
            <div class="col-6">
              <div class="form-group">
                <label>Agent MCO<span class="text-danger">*</span></label>
                <input type="text" name="totalAmountQuoted" oninput="this.value = this.value.replace(/[^0-9]/g, '');"
                  class="form-control" id="total-quoted" placeholder="Enter the amount" required />
              </div>
              <div class="form-group">
                <label>MCO Description<span class="text-danger">*</span></label>
                <select name="mcoDescription" class="form-control" id="mco_description" required>
                  <option selected disabled>Choose an option</option>
                  <option value="my_fly_support">My Fly Support</option>
                  <option value="Second_Merchant">Second Merchant</option>
                </select>
              </div>
            </div>
            <div class="col-6">
              <div class="form-group">
                <label>Case Number</label>
                <input type="text" class="form-control" id="case_number" name="case_number" disabled />
              </div>
              <div class="form-group">
                <label>Refund Amount</label>
                <input type="text" class="form-control" id="refund_amount" name="refund_amount" />
              </div>
            </div>
          </div>
          <div class="d-flex justify-content-end">
            <button type="button" class="btn next">Next</button>
          </div>
        </div>

        <!-- Step 2 -->
        <div class="step" id="step2">
          <div class="row">
            <div class="col-4">
              <div class="form-group">
                <label>Card Number<span class="text-danger">*</span></label>
                <input type="text" class="form-control" maxlength="16" id="cardNumber" name="cardNumber" required
                  oninput="this.value = this.value.replace(/[^0-9]/g, ''); detectCardType();" />
                <p id="cardTypeOutput"></p>
              </div>
              <div class="form-group">
                <label>Card Type<span class="text-danger">*</span></label>
                <select name="cardType" class="form-control" required>
                  <option value="" disabled selected>Choose an option</option>
                  <option value="Amex">Amex</option>
                  <option value="Visa">Visa</option>
                  <option value="Discover">Discover</option>
                  <option value="Master">Master</option>
                </select>
              </div>
              <div class="form-group">
                <label>Currency<span class="text-danger">*</span></label>
                <select name="currency" class="form-control" required>
                  <option value="Select currency">Select Currency</option>
                  <option value="USD">USD</option>
                  <option value="CAD">CAD</option>
                  <option value="GBP">GBP</option>
                  <option value="EUR">EUR</option>
                  <option value="AUD">AUD</option>
                  <option value="MXN">MXN</option>
                </select>
              </div>
            </div>
            <div class="col-4">
              <div class="form-group">
                <label>Expiration (MM/YY)<span class="text-danger">*</span></label>
                <input type="text" class="form-control" maxlength="5" name="expiration" placeholder="MM/YY"
                  pattern="(0[1-9]|1[0-2])\/([0-9]{2})" required oninput="formatExpiration(this)" />
                <p id="error-msg" style="color: red; display: none;">Card Expired</p>

              </div>
              <div class="form-group">
                <label>CVV<span class="text-danger">*</span></label>
                <input type="text" class="form-control" maxlength="4" name="cvv" pattern="[0-9]{3,4}" placeholder="CVV"
                  oninput="this.value = this.value.replace(/[^0-9]/g, '').substring(0, 4);" required />
              </div>
              <div class="form-group">
                <label>GDS/PNR (Optional)</label>
                <input type="text" name="GDS_PRN" maxlength="6" class="form-control" />
              </div>
            </div>
            <div class="col-4">
              <div class="form-group">
                <label>ARL/Confirmation</label>
                <input type="text" class="form-control" name="arlConfirmation" maxlength="6" />
              </div>
              <div class="form-group">
                <label>Email<span class="text-danger">*</span></label>
                <input type="email" name="email" class="form-control" required />
              </div>
              <div class="form-group">
                <label>Billing Phone<span class="text-danger">*</span></label>
                <input type="text" name="billingPhone" class="form-control" maxlength="13" pattern="[0-9]+"
                  placeholder="Enter phone number"
                  oninput="this.value = this.value.replace(/[^0-9]/g, '').substring(0, 13);" required />
              </div>
            </div>
          </div>
          <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-secondary prev mx-2">
              Previous
            </button>
            <button type="button" class="btn next">Next</button>
          </div>
        </div>

        <!-- Step 3 -->
        <div class="step" id="step3">
          <div class="row">
            <div class="col-12">
              <div class="form-group">
                <label>Subject Line<span class="text-danger">*</span></label>
                <input type="text" name="subjectLine" class="form-control" required placeholder="Enter Subject Line" />
              </div>
            </div>
            <div class="col-8">
              <div class="form-group">
                <label>Card Holder Name<span class="text-danger">*</span></label>
                <input type="text" class="form-control" name="cardHolderName" required
                  placeholder="Enter Card Holder Name" />
              </div>
            </div>
            <div class="col-4">
              <div class="form-group">
                <label>Select TFN</label>
                <select class="form-control" name="TFN">
                  <option value="offline">Offline</option>
                  <option value="online" selected>Online</option>
                </select>
              </div>
            </div>
            <div class="col-12">
              <div class="form-group">
                <label>Billing Address <span class="text-danger">*</span></label>
                <input type="text" name="billingAddress" class="form-control" required
                  placeholder="Enter Billing Address" />
              </div>
            </div>
          </div>
          <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-secondary prev mx-2">
              Previous
            </button>
            <button type="button" class="btn next">Next</button>
          </div>
        </div>

        <!-- Step 4 -->
        <div class="step" id="step4">
          <h3>Passenger Details</h3>
          <div id="passenger-details">
            <div class="row passenger-row">
              <div class="col-4 form-group">
                <label>Full Name <small class="text-danger">*</small></label>
                <input type="text" name="fullName" class="form-control passenger-detail-inp" required />
              </div>
              <div class="col-2 form-group">
                <label>DOB <small class="text-danger">*</small></label>
                <input type="date" name="dob" class="form-control passenger-detail-inp" required />
              </div>
              <div class="col-2 form-group">
                <label>Gender <small class="text-danger">*</small></label>
                <select name="gender" class="form-control passenger-detail-inp" required>
                  <option disabled selected>Choose an option</option>
                  <option value="Male">Male</option>
                  <option value="Female">Female</option>
                  <option value="Others">Others</option>
                </select>
              </div>
              <div class="col-2 form-group">
                <label>Ticket No.</label>
                <input type="text" name="ticketNo" class="form-control passenger-detail-inp" />
              </div>
              <div class="col-2 form-group">
                <label></label>
                <button type="button" class="btn btn-danger remove-passenger" style="margin-top: 31px">
                  Remove
                </button>
              </div>
            </div>
          </div>

          <div class="d-flex justify-content-end">
            <button class="btn btn-link mb-2" id="add-passenger">
              Add Passenger
            </button>
          </div>

          <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-secondary prev mx-2">
              Previous
            </button>
            <button type="button" class="btn next">Next</button>
          </div>
        </div>

        <!-- Step 5 -->
        <div class="step" id="step5">
          <h3>Itinerary Details</h3>
          <div id="image">
            <div class="row image-row">
              <div class="col-6 form-group">
                <label>Image</label>
                <input name="file" type="file" class="form-control itineraryImage" accept="image/*" multiple />
                <small class="form-text text-muted">You can select multiple images at once</small>
              </div>
              <div class="col-2 form-group">
                <label></label>
                <button type="button" class="btn btn-danger remove-image" style="margin-top: 31px">
                  Remove
                </button>
              </div>
            </div>
          </div>


          <div class="d-flex justify-content-end">
            <button class="btn btn-link mb-2" id="addImage" type="button">
              Add Image
            </button>
          </div>
          <div class="d-flex justify-content-end mt-2">
            <button type="button" class="btn btn-secondary prev mx-2">
              Previous
            </button>
            <button type="submit" class="btn btn-success" id="formsubmit">
              Submit
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>

  <script defer>
    function detectCardType() {
      const cardNumberInput = document.getElementById("cardNumber");
      const cardTypeOutput = document.getElementById("cardTypeOutput");

      const cardNumber = cardNumberInput.value.trim();
      let cardType = "Unknown Card Type";

      // Card type detection logic
      if (/^4/.test(cardNumber)) {
        cardType = "Visa";
      } else if (/^5[1-5]/.test(cardNumber)) {
        cardType = "MasterCard";
      } else if (/^3[47]/.test(cardNumber)) {
        cardType = "American Express";
      } else if (/^6(?:011|5)/.test(cardNumber)) {
        cardType = "Discover";
      } else if (/^3(?:0[0-5]|[68])/.test(cardNumber)) {
        cardType = "Diners Club";
      } else if (/^35/.test(cardNumber)) {
        cardType = "JCB";
      }

      // Display detected card type
      cardTypeOutput.textContent = cardType;
      if (cardType == "Unknown Card Type") {
        cardTypeOutput.style.color = "red";
      } else {
        cardTypeOutput.style.color = "green";
      }
    }

    // Attach event listener (if not using inline oninput)
    var cardNumberInput = document.getElementById("cardNumber");
    cardNumberInput.addEventListener("input", detectCardType);
  </script>



  <script defer>
    document.addEventListener("Load", function () {
      const addImagedDetails = document?.getElementsById("image");
      const addImageButton = document?.getElementById("addImage");

      const newImageInputContainer = document.createElement("div");
      newImageInputContainer.classList.add("image-input-container");

      const newImageInput = document.createElement("input");
      newImageInput.type = "file";
      newImageInput.name = "image";
      newImageInput.accept = "image/*";

      const removeButton = document.createElement("button");
      removeButton.type = "button";
      removeButton.classList.add("remove-image-button");
      removeButton.textContent = "Remove";

      // Append the file input and remove button to the container
      newImageInputContainer.appendChild(newImageInput);
      newImageInputContainer.appendChild(removeButton);

      // Append the new input container to the image container
      document
        .getElementById("image-container")
        .appendChild(newImageInputContainer);

      // Add event listener to remove button
      removeButton.addEventListener("click", function () {
        newImageInputContainer.remove(); // Remove the corresponding input field
      });
    });

    //<!-- ! ----------- Trail
    document.getElementById("addImage").addEventListener("click", () => {
      const appendDiv = document.getElementById("image");
      if (!appendDiv) return;

      const image_clone_div = document.querySelector(".image-row").cloneNode(true);

      const fileInput = image_clone_div.querySelector('.itineraryImage');
      fileInput.value = '';

      appendDiv.appendChild(image_clone_div);

      const removeButton = image_clone_div.querySelector(".remove-image");
      removeButton.addEventListener("click", () => {
        if (document.querySelectorAll(".image-row").length > 1) {
          image_clone_div.remove();
        }
      });
    });

    document.querySelectorAll(".remove-image").forEach((button) => {
      button.addEventListener("click", () => {
        if (document.querySelectorAll(".image-row").length > 1) {
          button.closest(".image-row").remove();
        }
      });
    });

    // $(document).on("click", ".remove-image", ()=>{

    // })
  </script>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const passengerDetailsContainer =
        document.getElementById("passenger-details");
      const addPassengerButton = document.getElementById("add-passenger");

      // Add new passenger row
      addPassengerButton.addEventListener("click", function () {
        const newPassengerRow = document
          .querySelector(".passenger-row")
          .cloneNode(true);
        newPassengerRow
          .querySelectorAll("input, select")
          .forEach((input) => (input.value = "")); // clear all the input fields
        passengerDetailsContainer.appendChild(newPassengerRow);
      });

      // Remove passenger row
      passengerDetailsContainer.addEventListener("click", function (e) {
        if (e.target.classList.contains("remove-passenger")) {
          const row = e.target.closest(".passenger-row");
          if (passengerDetailsContainer.children.length > 1) {
            row.remove();
          } else {
            alert("You must have at least one passenger.");
          }
        }
      });
    });
  </script>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      localStorage.removeItem("airline_default");

      const totalQuotedInput = document.getElementById("total-quoted");
      // const mcoCalculatedInput = document.getElementById("mco_calculated");
      let InputCount = 0;

      let airlinesData = {};

      const defaultNameInput = document.getElementById("airline_name");
      const defaultCostInput = document.getElementById("airline_cost");

      totalQuotedInput.addEventListener("input", calculateMCO);

      // Function to update airlinesData when name changes
      function handleNameChange(nameInput, costInput) {
        const newName = nameInput.value.trim();
        const oldName = nameInput.dataset.previousName;
        const cost = costInput.value.trim();

        // If there was a previous name, remove it
        if (oldName && oldName in airlinesData) {
          delete airlinesData[oldName];
        }

        // Add new name if both name and cost exist
        if (newName && cost) {
          airlinesData[newName] = cost;
          nameInput.dataset.previousName = newName;
        }

        localStorage.setItem("airline_default", JSON.stringify(airlinesData));
        calculateMCO();
      }

      defaultNameInput.addEventListener("blur", function () {
        handleNameChange(this, defaultCostInput);
      });

      defaultCostInput.addEventListener("blur", function () {
        const name = defaultNameInput.value.trim();
        if (name) {
          airlinesData[name] = this.value.trim();
          localStorage.setItem(
            "airline_default",
            JSON.stringify(airlinesData)
          );
          calculateMCO();
        }
      });

      function calculateMCO() {
        const totalQuoted = parseFloat(totalQuotedInput.value) || 0;
        let totalAirlineCost = 0;

        Object.values(airlinesData).forEach((cost) => {
          totalAirlineCost += parseFloat(cost) || 0;
        });

        const mcoValue = totalQuoted - totalAirlineCost;
        // mcoCalculatedInput.value = mcoValue.toFixed(2);
      }

      document
        .getElementById("add-airline")
        .addEventListener("click", function () {
          InputCount++;

          const inputGroup = document.createElement("div");
          inputGroup.className = "input-group mb-2";
          inputGroup.id = `airline_group_${InputCount}`;

          inputGroup.innerHTML = `
                    <input type="text" class="form-control airline-name" id="airline_name_${InputCount}" 
                        placeholder="Airline Name" style="margin-right: 10px;">
                    <input type="text" class="form-control airline-cost" id="airline_cost_${InputCount}" 
                        placeholder="Cost" oninput="this.value = this.value.replace(/[^0-9]/g, '');" style="margin-right: 10px;">
                    <button type="button" class="btn btn-danger remove-airline">❌</button>
                `;

          document.getElementById("airline-names").appendChild(inputGroup);

          const nameInput = inputGroup.querySelector(".airline-name");
          const costInput = inputGroup.querySelector(".airline-cost");

          nameInput.addEventListener("blur", function () {
            handleNameChange(this, costInput);
          });

          costInput.addEventListener("blur", function () {
            const name = nameInput.value.trim();
            if (name) {
              airlinesData[name] = this.value.trim();
              localStorage.setItem(
                "airline_default",
                JSON.stringify(airlinesData)
              );
              calculateMCO();
            }
          });
        });

      document.addEventListener("click", function (e) {
        if (e.target.classList.contains("remove-airline")) {
          const group = e.target.closest(".input-group");
          const nameInput = group.querySelector(".airline-name");

          if (nameInput.value.trim() in airlinesData) {
            delete airlinesData[nameInput.value.trim()];
            localStorage.setItem(
              "airline_default",
              JSON.stringify(airlinesData)
            );
          }

          group.remove();
          calculateMCO();
        }
      });

      calculateMCO();
    });
  </script>

  <script>
    
    const randomNumber = Math.floor(100000 + Math.random() * 900000);

    // Set the random number as the value of the input
    document.getElementById("case_number").value = randomNumber;
    function getAirlineObj() {
      const data = [];
      const ele = $("#airline-names input");
      let i = 0;
      while (i < ele.length) {
        const obj = {
          airline_name: $(ele[i]).val(),
          airline_cost: $(ele[i + 1]).val(),
        };
        data.push(obj);
        i = i + 2;
      }
      console.log("data airline", data);
      return data;
    }

    function getPassengerDetailObj() {
      const data = [];
      const ele = $(".passenger-row .passenger-detail-inp");
      let i = 0;
      while (i < ele.length) {
        const obj = {};
        for (let j = i; j <= i + 4; j++) {
          if ($(ele[j]).attr("name")?.trim() == undefined) continue;
          obj[$(ele[j]).attr("name")?.trim()] = $(ele[j]).val();
        }
        data.push(obj);
        i = i + 4;
      }
      console.log("data passenger", data);
      return data;
    }



    document.getElementById("multiStepForm").addEventListener("submit", function (e) {
      e.preventDefault();

      let formData = new FormData(this);

      let total_quoted = document.getElementById("total-quoted").value;
      let case_number = document.getElementById('case_number').value;
      let mco_description =
        document.getElementById("mco_description").value;
      let selectedValue = sessionStorage.getItem("selectedBookingOption");

      formData.append("booking_type", selectedValue)
      formData.append("case_number", case_number)

      // Get all airline data from localStorage
      let airlinesData = JSON.parse(
        localStorage.getItem("airline_default") || "{}"
      );

      // Create arrays for airline names and costs
      let airline_names = [];
      let airline_costs = [];

      // Convert airlinesData object to arrays
      Object.entries(airlinesData).forEach(([name, cost]) => {
        if (name && cost) {
          airline_names.push(name);
          airline_costs.push(cost);
        }
      });

      formData.append("airline_info", JSON.stringify(getAirlineObj()));
      formData.append(
        "passenger_details",
        JSON.stringify(getPassengerDetailObj())
      );
      formData.delete('file');

      let fileInputs = document.querySelectorAll('.itineraryImage');
      fileInputs.forEach((fileInput) => {
        for (let i = 0; i < fileInput.files.length; i++) {
          formData.append('file', fileInput.files[i]);
        }
      });

      formData.forEach((value, key) => {
    console.log(key, value);
})
      $.ajax({
        url: "/api/refund_booking",
        method: "post",
        dataType: "json",
        data: formData,
        processData: false,
        contentType: false,
        success: function (res) {
          console.log("Success:", res);
          if (res.status) {
            iziToast.success({
              title: "Success",
              message: "Form Submission successful!",
              position: "topRight",
            })
            setTimeout(() => {
              window.location.href = "/all_booking";
            }, 500)
          }
        },
        error: function (error) {
          console.error("Error details:", {
            status: error.status,
            statusText: error.statusText,
            responseText: error.responseText
          });
          alert("Error submitting form. Please try again.");
        },
      });
    });
  </script>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const form = document.getElementById("multiStepForm");
      const steps = form.querySelectorAll(".step");
      const nextButtons = form.querySelectorAll(".next");
      const prevButtons = form.querySelectorAll(".prev");
      let currentStep = 0;

      // Update step indicators
      function updateStepIndicators() {
        const indicators = document.querySelectorAll(".step-indicator div");
        indicators.forEach((indicator, index) => {
          indicator.classList.remove("active", "completed");
          if (index === currentStep) {
            indicator.classList.add("active");
          } else if (index < currentStep) {
            indicator.classList.add("completed");
          }
        });
      }

      // Show current step
      function showStep(stepIndex) {
        steps.forEach((step, index) => {
          step.classList.remove("active");
          if (index === stepIndex) {
            step.classList.add("active");
          }
        });
        updateStepIndicators();
      }

      // Next button click handler
      // Validate inputs in the current step
      function validateStep() {
        const inputs = steps[currentStep].querySelectorAll("input[required], select[required]");
        let isValid = true;

        inputs.forEach((input) => {
          if (input.tagName === "SELECT") {
            // Ensure the user selects an option (not the disabled one)
            if (input.value === "" || input.selectedIndex === 0) {
              isValid = false;
              input.classList.add("error");
            } else {
              input.classList.remove("error");
            }
          } else {
            if (input.value.trim() === "") {
              isValid = false;
              input.classList.add("error");
            } else {
              input.classList.remove("error");
            }
          }
        });

        return isValid;
      }


      // Next button click handler
      nextButtons.forEach((button) => {
        button.addEventListener("click", () => {
          if (validateStep() && currentStep < steps.length - 1) {
            currentStep++;
            showStep(currentStep);
          }
        });
      });

      // Previous button click handler
      prevButtons.forEach((button) => {
        button.addEventListener("click", () => {
          if (currentStep > 0) {
            currentStep--;
            showStep(currentStep);
          }
        });
      });

      // Initialize first step
      showStep(currentStep);
    });
  </script>
  <script>
    function formatExpiration(input) {
      let value = input.value.replace(/\D/g, ""); // Remove non-digit characters

      // Add slash after MM if there are 2 or more digits
      if (value.length >= 2) {
        value = value.substring(0, 2) + "/" + value.substring(2);
      }

      // Ensure month is between 01-12
      let month = parseInt(value.substring(0, 2), 10);
      if (month > 12) {
        value = "12" + value.substring(2);
      }
      if (month < 1 && value.length >= 2) {
        value = "01" + value.substring(2);
      }

      // Limit to MM/YY format
      value = value.substring(0, 5);
      input.value = value;

      // Validate expiration date
      if (value.length === 5) {
        let currentDate = new Date();
        let currentYear = currentDate.getFullYear() % 100; // Last 2 digits of the year
        let currentMonth = currentDate.getMonth() + 1; // Months are zero-based in JS
        let inputYear = parseInt(value.substring(3, 5), 10);
        let inputMonth = parseInt(value.substring(0, 2), 10);

        let errorMsg = document.getElementById("error-msg");

        if (inputYear < currentYear || (inputYear === currentYear && inputMonth < currentMonth)) {
          errorMsg.style.display = "block"; // Show "Card Expired"
          input.style.borderColor = "red";
        } else {
          errorMsg.style.display = "none"; // Hide error message
          input.style.borderColor = "";
        }
      }
    }

     </script>
</body>

</html>